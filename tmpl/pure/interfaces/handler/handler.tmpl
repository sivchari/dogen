//go:generate mockgen -source=$GOFILE -destination=mock_$GOPACKAGE/mock_$GOFILE  
package handler

import (
    "net/http"

    {{ .Model }}U "{{ .Pkg }}/{{ .Dist }}/usecase"
)

type {{ .Model | title }}Handler interface {
    HandleSelect() http.HandlerFunc
    HandleInsert() http.HandlerFunc
    HandleUpdate() http.HandlerFunc
    HandleDelete() http.HandlerFunc
}

type {{ .Model }}Handler struct {
    {{ .Model }}UseCase {{ .Model }}U.{{ .Model | title }}UseCase
}

// New{{ .Model | title }}Handler
func New{{ .Model | title }}Handler({{ .Model }}U {{ .Model }}U.{{ .Model | title }}UseCase) {{ .Model | title }}Handler {
    return &{{ .Model }}Handler {
        {{ .Model }}UseCase: {{ .Model }}U,
    }
}

// HandleSelect
func ({{ .Model }}H {{ .Model }}Handler) HandleSelect() http.HandlerFunc {
    return func(writer http.ResponseWriter, request *http.Request) {
        panic("do something")
    }
}

// HandleInsert
func ({{ .Model }}H {{ .Model }}Handler) HandleInsert() http.HandlerFunc {
    return func(writer http.ResponseWriter, request *http.Request) {
        panic("do something")
    }
}

// HandleUpdate
func ({{ .Model }}H {{ .Model }}Handler) HandleUpdate() http.HandlerFunc {
    return func(writer http.ResponseWriter, request *http.Request) {
        panic("do something")
    }
}

// HandleDelete
func ({{ .Model }}H {{ .Model }}Handler) HandleDelete() http.HandlerFunc {
    return func(writer http.ResponseWriter, request *http.Request) {
        panic("do something")
    }
}

// {{ .Model | title }}Request
type {{ .Model | title }}Request struct {
    // Need to implement field
}

// {{ .Model | title }}Response
type {{ .Model | title }}Response struct {
    // Need to implement field
}
